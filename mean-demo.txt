MEAN stack (48 hours -8 weeks -weekly 6 hours)
===========
M-MongoDB
E -Express JS
A-Angular
N-Node JS

Day1 & Day2
===========

Node JS :Server side JS
         Java Script runtime envirnment +Builtin JS libraries(packages/modules)
   

Language Objects
=====================
 String 
 Math
 Date
 Boolean
 Number
 Array
 Object  


Browser Objects
================
Window
document
history
navigator


Node JS buitlin modules
========================
os
timers =>global
buffer =>buffer  
http
url
events
fs


Day3
=====


Step 1 : Install express-generator tool
 
          npm i -g express-generator


Step 2 : Create a Express application

         express softedge-express-app


y
Develop a restufull api using express and data source as array of accounts

Class Work
============
[
{userId:101,name:'Ram Patil',email:'Ram@gmail.com',dob:new Date("July 21,1982")}
{userId:101,name:'Ram Patil',email:'Ram@gmail.com',dob:new Date("July 21,1982")}
{userId:101,name:'Ram Patil',email:'Ram@gmail.com',dob:new Date("July 21,1982")}
{userId:101,name:'Ram Patil',email:'Ram@gmail.com',dob:new Date("July 21,1982")}
{userId:101,name:'Ram Patil',email:'Ram@gmail.com',dob:new Date("July 21,1982")}
];







http://localhost:8081/companyarray/users         GET    
http://localhost:8081/companyarray/users/101     GET
http://localhost:8081/companyarray/users/101     DELETE
http://localhost:8081/companyarray/users/101     PUT
http://localhost:8081/companyarray/users          POST


Home work
===========

{accno:101,name:'Rajesh',balance:45677.888,doc:new Date()}


http://localhost:8081/bankingarray/accounts         GET    
http://localhost:8081/bankingarray/accounts/101     GET
http://localhost:8081/bankingarray/accounts/101     DELETE
http://localhost:8081/bankingarray/accounts/101     PUT
http://localhost:8081/bankingarray/accounts         POST







third party modules
======================
express
body-parser
cookie-parser
express-session
express-fileupload
mysql
mongoose


day7 or day8
==================

Database
==========

      RDBMS : (ACID)
         MySQL,Oracle,DB2,Maria DB, SQL Server ,Postegrey
      
      NOSQL-(Not Only SQL)   CAP  Theorem
      
      C -Consistency
                Weak
                Strong
                Eventual 
      
      A - Availabilty
      
      P -Partition tolerance
      
      
      CP => MongoDB ,Hbase
      
      AP => Apache Casendra 
      
NOSQL Database Models
=======================
NOSQL Databse models
======================
1.Key value         

2.column family     :Hbase ,Casendra  =>cf:cq:value

1 Table             : N Column Family
1 Column  Family    : N Column qualifiers
1 Column qualifier : 1 Value

      Table employee
      ==============
       id    name     salary   flatNo   bldName area       city  
       101   pradeep  1000     101      A4      shivane    Pune

Column Family     
                   employee_personal_info
                    
Column qualifier  :id    name     salary
Column Value       101   pradeep  1000     
 

Column Family     
                   employee_address

Column qualifier  :flatNo   bldName    area       city  
Column Value        101      A4       Shivane      Pune   

3.document oriented :MongoDB        

   {id:101,name:'Pradeep Chinchole',salary:12000}

4.graph storage     : Neo4j


MongoDB
========
RDBMS                        MongoDB
========================================
database                    database

table                       collections


row/tupple                 document


columns                    fields


primary key                _id generated by mongodb server


joins                      embeded documents


sqlplus/oracle             mongo/mongod

mysql/mysqlserver           


To start mongodb server   
=========================

create folder c:\data\db

C:\Program Files\MongoDB\Server\3.2\bin>mongod   <enter>



create folder d:\data

C:\Program Files\MongoDB\Server\3.2\bin>mongod --dbpath d:\data   <enter>



To start mongodb client   
=========================

C:\Program Files\MongoDB\Server\3.2\bin>mongo


db

show dbs

use school

db.createCollection("students");

show collections;

db.students.insert({name:'ram',age:34});

db.students.insert({name:'rahim',age:34,city:'Pune'});

db.students.insert({name:'david',age:34,city:'Mumbai'});

db.students.insert({name:'pradeep',age:34,city:'Banglore'});

db.students.insert({_id:3456,name:'prakash',age:34,city:'Banglore'});

db.teachers.insert({name:"Ashok",subject:'Mathematics'});


db.students.find();

db.students.find().pretty();


db.students.find({age:34});

db.students.findOne({age:34});


db.students.update({age:34},{$set:{country:'India'}});

db.students.update({age:34},{$set:{country:'India'}},{multi:true});


db.students.update({age:25},{$set:{country:'India',name:'Rajesh'}},{upsert:true});



db.students.remove({age:24});


db.students.find({age:{$lt:30}});

db.students.find({age:{$lte:30}});

db.students.find({age:{$gt:30}});

db.students.find({age:{$gte:30}});



db.students.find({age:54,city:'Pune'});


db.students.find({$and:[{age:34},{city:'Pune'}]});

db.students.find({$or:[{age:25},{city:'Pune'}]});































      
  










Angular 8.                       |
==================
Day1  :
======

Features of Angular
====================
1.Dependency Injection
2.Two way data binding
       
3.MVC :
           With angular we can evelop application in clean MVC way

4.Testing : Testing is the area where Angular shines really

5.Modules,Directives,Filters,Services, Controllers (Components and Templates) etc....

Module is a container for services,directives,pipes,components and some other modules also.



AngularJS (1.6)                                             Angular (8.0)

1. Not developed by keeping                                 1.Developed specially for
    mobile devlopment in mind.                                             Mobile development

2. Basic building block is                                 2.Basic building block is
    Java Script Function                                            a TypeScript class

3.Controllers                                             3.Components and templates

4.filters   (sort,format,search)                          4.pipes

5.services                                                5.providers

6.directives                                              6.directive   
        ng-if                                                        *ngIf
        ng-repeat                                                    *ngFor ,ngModel
      

7.routing   (function based)                                 7.routing   (JSON based) 

8.development is easy                                         8.complicated


To make angular development easy Angular team has provided one tool (@angular/cli) 
 

@angular/cli tool internally depends on Node JS




1.Install Node JS  :https://nodejs.org/en/download/

2.node -v

3.npm -v

4.Install angular cli

A.     Local Installation
==========================

     npm i @angular/cli  <enter>

B.     Global Installation
===========================

     npm i  -g @angular/cli   <enter>


 To see the version of angular-cli tool
=====================================
  ng version




Set Path to Node Js and Angular CLI 

C:\Users\PC5037971>set path=c:\node-v7.10.0-win-x64;c:\angular-cli\node_modules\.bin;

  ng -v



Create A New Angular Project
===========================

ng new <project_name> <enter> 










templateUrl: './app.component.html',//Where to display if code is greater than 3 lines

template: '<h2>{{title}}</h2>',//Where to display if code is less than 4 lines


Component is responsible for 4 things

 1.What to display?
 2.How to display?
 3.Where to display?
 4.Where to inject?


Angular Routing
===============

/basics            component : AngularBasicsComponent
/pipes             component : AngularPipesComponent
/home              component : HomeComponent
/technologies      component : TechnologiesComponent
/**                component : HomeComponentt


Angular Binding types

1. Interpolation   

       Interpolation use the {{ expression }} to render the bound value to the componentâ€™s template.
       
       <input type="number"   min="{{min}}">
       

2.Property Binding

       Property binding user [] to send values from the component  to the template.
       <input type="number"   [min]="min">
         

3.Event Binding

   <input type="button"  (click)="showHide()" />

4.One way data binding
         
       <input type="text"  [ngModel]="name" />

4.Two way data binding
         
       <input type="text"  [(ngModel)]="name" />
     



angular cli commands
=========================

To create a component  => ng g c  <Angular4Basics>
To create a service    => ng g s  <AngularService>
To create a directive  => ng g d  <AngularDirective>
To create a pipe       => ng g p  <AngularPipe>
To create a module     => ng g m  <AngularModule>
To create a class      => ng g class <AngularClass>
 

Note :TypeScript class members are public by default.


comopnent  ->@Component
module     ->@NgModule
pipe       ->@Pipe
directive  ->@Directive
service    ->@Injectable


Angular Directives  :add functionalities to HTML elements
===========================================
Attribute Directve    :Won't change the HTML DOM structure
====================== 
 [ngStyle]
 [ngClass]
 [ngModel] =>It is applicable for only input elements ,need to import FormsModule from @angular/forms
 [ngSwitch]

Structural Directive :Will change the HTML DOM structure
====================
   *ngFor
   *ngIf
   *ngSwitchCase   => It is applicable for only container tags
   *ngSwitchDefault=> It is applicable for only container tags

Component Directive
==================
<app-root>  </app-root>
<router-outlet></router-outlet>
<ng-template></ng-template>



2.Custom Directives
=======================
Attribute Directive   :  ElementRef and Renderer2
====================



<h1  [bgColor]="'red'"  [fgColor]="'red'" >Hello World</h1>

Structural Directive    :TemplateRef  and VieContainerRef
=======================

<h1  *ngShow="true">Hello World</h1>
<h1  *ngHide="true">Hello World</h1>




Day2  :
======


technologies=[
{id:101,name:'Angular',likes:0,dislikes:0},
{id:102,name:'React',likes:0,dislikes:0},
{id:103,name:'AWS Basics',likes:0,dislikes:0},
{id:104,name:'Spring',likes:0,dislikes:0},
{id:105,name:'Micro Service',likes:0,dislikes:0},
];









employees=[
    {id:12,name:'Ram chinchole',salary:2345500,variable:0.15,
    city:'Pune',mobile:'8149976894',pan:'cmxac9845d',
    doj:new Date("February 01,2011"),isMarried:true,gender:1
   },
   {id:23,name:'Sachin chinchole',salary:324242.456784343,variable:0.10,
   city:'Mumbai',mobile:'7123456732',pan:'abxac9845a',
   doj:new Date("April 01,2013"),isMarried:true,gender:1
  },
  
  {id:11,name:'Ameya Joshi',salary:34343.456784343,variable:0.11,
  city:'Mumbai',mobile:'7788554433',pan:'abcac9845c',
  doj:new Date("June 01,2018"),isMarried:true,gender:1
 },
 
 {id:14,name:'Prachitee chinchole',salary:45345.456784343,variable:0.20,
 city:'Pune',mobile:'9158652627',pan:'xyzac9845d',
 doj:new Date("June 01,2010"),isMarried:false,gender:2
},

{id:21,name:'Prachi chinchole',salary:4345345.456784343,variable:0.15,
city:'Solapur',mobile:'9890732222',pan:'pvcac9845d',
doj:new Date("February 01,2017"),isMarried:true,gender:2
},

{id:17,name:'Mahesh chinchole',salary:345345.34324,variable:0.12,
city:'Solapur',mobile:'7158652622',pan:'amxac9845d',
doj:new Date("May 01,2013"),isMarried:false,gender:3
},

];





Angular Pipes & Services

Angular Pipes are used to format ,sort search (filter) the data.





Angular Buitlin Pipes  (11 Pipes)
======================

String
========
uppercase
lowercase
titlecase (angular4)
slice  

array
=====
slice

array|slice:startIndex:lastIndex


number
======
number     salary|number:'9.3-4'   
currency   salary|currency:'Rs'
percent    salary|percent

date
=====
date      

dob|date:'shortDate'
dob|date:'mediumDate'
dob|date:'longDate'
dob|date:'fullDate'
dob|date:'dd-MM-yyyy'

dob|date:'shortTime'
dob|date:'mediumTime'
dob|date:'longTime'
dob|date:'fullTime'
dob|date:'hh:mm:ss'

dob|date:'short'
dob|date:'medium'
dob|date:'long'
dob|date:'full'
dob|date:'dd-MMM-yyyy,hh:mm:ss'

JSON Object
===========
json             object|json
keyvalue         object|keyvalue

Observable
===========
async



Angular Custom Pipes
=====================
gender|gender    

employees|orderBy   =>sort employees on id basis in ascending order

employees|orderBy:'id'   =>sort employees on id basis in ascending order

employees|orderBy:'name'   =>sort employees on name basis in ascending order

employees|orderBy:'name':true   =>sort employees on name basis in descending order


employees|filter:'searchText'



Angular Application to perform 
CRUD


array.sort((e1,e2)=>e1.id-e2.id);
     =>


array.sort(function(e1,e2){
return e1.id-e2.id;
})



day3
=====
Angular provides HttpClient from HttpClientModule to invoke remote service

RouterModule
Routes


day4
====
1.NestedComponent(Parent child Communcation)

Parent -> child   => @Input()

Child ->Parent  => @Output() 


3.FormValidation
=================
1. Template Driven Forms
2.Reactive Forms/Model Driven Form 


Template Driven Forms Features
===============================
Easy to use
Suitable for simple scenarios and fails for complex scenarios
Similar to AngularJS
Two way data binding(using [(NgModel)] syntax)
Minimal component code
Automatic track of the form and its data(handled by Angular)
Unit testing is another challenge


Reactive Forms Features
===========================================
More flexible, but needs a lot of practice
Handles any complex scenarios
No data binding is done (immutable data model preferred by most developers)
More component code and less HTML markup
Reactive transformations can be made possible such as
Handling a event based on a debounce time
Handling events when the components are distinct until changed
Adding elements dynamically
Easier unit testing

4.Pagination
=================


5.RouteParams and QueryParams
=============================


http://www.banking.com/accounts        ->GET-> GET All Accounts
http://www.banking.com/accounts/101  ->GET-> GET  Account with accno 101


http://www.banking.com/accounts        ->DELETE-> DELETE All Accounts
http://www.banking.com/accounts/101  ->DELETE-> DELETE  Account with accno 101


http://www.banking.com/accounts        ->POST-> CREATE A ACCOUNT



http://www.banking.com/accounts        ->PUT-> UPDATE All Accounts
http://www.banking.com/accounts/101  ->PUT-> UPDATE  Account with accno 101




class Employee{
private int id;//dependency
private String name;
private  Address address;

public Employee(){
}

public setId(int id){
this.id=id;
}

}


class Address{



}




npm i @angular/material @angular/cdk hammerjs


ng g @angular/material:material-nav --name NavBar

ng g @angular/material:material-table --name MyTab

ng g @angular/material:material-dashboard --name MyDashboard















